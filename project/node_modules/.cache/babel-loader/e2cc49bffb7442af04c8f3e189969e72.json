{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Anubhav Thakur\\\\Desktop\\\\React\\\\project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Anubhav Thakur\\\\Desktop\\\\React\\\\project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Anubhav Thakur\\\\Desktop\\\\React\\\\project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Anubhav Thakur\\\\Desktop\\\\React\\\\project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Anubhav Thakur\\\\Desktop\\\\React\\\\project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Anubhav Thakur\\\\Desktop\\\\React\\\\project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Anubhav Thakur\\\\Desktop\\\\React\\\\project\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Navbar from './Components/Navbar';\nimport Home from './Components/Home';\nimport Person from './Components/Person';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      /*\n        We are creating a property called displayInfos and we are creating an array of the property objects.\n        We are going to pass this list as property to Display component.\n        Display component will recieve this property as a list and then we will cycle through and display it.\n        To pass this array to the Display component:\n              --> <Display displayInfos={this.state.displayInfos} />\n      */\n      displayInfos: [{\n        name: 'Jim',\n        birthMonth: 'June',\n        id: 1\n      }, {\n        name: 'Pam',\n        age: 31,\n        birthMonth: 'January',\n        id: 2\n      }, {\n        name: 'Richard',\n        age: 42,\n        birthMonth: 'August',\n        id: 3\n      }]\n    };\n\n    _this.addInfo = function (info) {\n      console.log('Inside App Component', info);\n      /*\n        We have state of AddInfo component here (i.e 'info' argument of the function)\n        and now we need to update the state of App Component here with the 'info' object.\n        For that we need to setState.\n         But notice that displayInfos state has id: attribute but the info object we get doesn't have id.\n        If we give user to input the id then they can input same id's and that would be bad and generate some duplicate id.\n        We can add the id attribute by assinging it some value.\n      */\n      //\n\n      /*\n        Now remember we can't alter the state Directly so we can't push directly tothe array like:\n            this.setState({\n              displayInfos: this.displayInfos.push(info) --- we can't do this because push method alter's the original array.\n            })\n        So the way would be:\n          -- Make a copy of the displayInfos array. That we will not push the info directly into the displayInfos array\n          -- Now push the new info into the copy of the array and assign that array to the setState method.\n          -- We create the copy of the displayInfos array using the SPREAD OPERATORS like:\n                 let displayInfos = [...this.state.displayInfos] -- this creates the copy of the array.\n           -- The displayInfos will be the exact copy of the displayInfos array from initial state.\n          -- Now we can just add the info from AddInfo component to the above newly created array like:\n                let displayInfos = [...this.state.displayInfos, info]\n          -- So now we are not directly updating the array outside setState().\n      */\n      //  let displayInfos = [...this.state.displayInfos, info];\n\n      info.id = Math.floor(Math.random() * 10);\n      console.log(info.id);\n      var displayInfos = [].concat(_toConsumableArray(_this.state.displayInfos), [info]);\n      console.log(displayInfos);\n\n      _this.setState({\n        displayInfos: displayInfos\n      });\n    };\n\n    _this.deleteInfo = function (id) {\n      console.log(id);\n\n      var displayInfos = _this.state.displayInfos.filter(function (info) {\n        return info.id !== id;\n      });\n\n      console.log('After Deleting', displayInfos);\n\n      _this.setState({\n        displayInfos: displayInfos\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(BrowserRouter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        component: Home,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/Person\",\n        component: Person,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Anubhav Thakur\\Desktop\\React\\project\\src\\App.js"],"names":["React","Component","BrowserRouter","Route","Navbar","Home","Person","App","state","displayInfos","name","birthMonth","id","age","addInfo","info","console","log","Math","floor","random","setState","deleteInfo","filter"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,EAAuBC,KAAvB,QAAoC,kBAApC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAO;AACP;;;;;;;AAQAC,MAAAA,YAAY,EAAE,CACZ;AAAEC,QAAAA,IAAI,EAAE,KAAR;AAAeC,QAAAA,UAAU,EAAC,MAA1B;AAAkCC,QAAAA,EAAE,EAAE;AAAtC,OADY,EAEZ;AAAEF,QAAAA,IAAI,EAAE,KAAR;AAAeG,QAAAA,GAAG,EAAE,EAApB;AAAwBF,QAAAA,UAAU,EAAC,SAAnC;AAA8CC,QAAAA,EAAE,EAAE;AAAlD,OAFY,EAGZ;AAAEF,QAAAA,IAAI,EAAE,SAAR;AAAmBG,QAAAA,GAAG,EAAE,EAAxB;AAA4BF,QAAAA,UAAU,EAAC,QAAvC;AAAiDC,QAAAA,EAAE,EAAE;AAArD,OAHY;AATP,K;;UAgBTE,O,GAAU,UAACC,IAAD,EAAU;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,IAApC;AACA;;;;;;;;AAUA;;AACA;;;;;;;;;;;;;;;AAiBF;;AACAA,MAAAA,IAAI,CAACH,EAAL,GAAUM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,EAAzB,CAAV;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACH,EAAjB;AACA,UAAIH,YAAY,gCAAO,MAAKD,KAAL,CAAWC,YAAlB,IAAgCM,IAAhC,EAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,YAAZ;;AAEE,YAAKY,QAAL,CAAc;AACZZ,QAAAA,YAAY,EAAEA;AADF,OAAd;AAGD,K;;UACCa,U,GAAa,UAACV,EAAD,EAAQ;AACrBI,MAAAA,OAAO,CAACC,GAAR,CAAYL,EAAZ;;AACA,UAAIH,YAAY,GAAG,MAAKD,KAAL,CAAWC,YAAX,CAAwBc,MAAxB,CAAgC,UAAAR,IAAI,EAAE;AACvD,eAAOA,IAAI,CAACH,EAAL,KAAYA,EAAnB;AACD,OAFkB,CAAnB;;AAGAI,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BR,YAA7B;;AACA,YAAKY,QAAL,CAAc;AACZZ,QAAAA,YAAY,EAAEA;AADF,OAAd;AAGC,K;;;;;;;6BACQ;AACP,aACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,EAEA,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAE,GAAnB;AAAuB,QAAA,SAAS,EAAEJ,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,EAGA,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAE,SAAnB;AAA6B,QAAA,SAAS,EAAEC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHA,CADA,CADF;AASD;;;;EA7EeL,S;;AAgFlB,eAAeM,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter,Route } from 'react-router-dom';\nimport Navbar from './Components/Navbar';\nimport Home from './Components/Home';\nimport Person from './Components/Person';\n\nclass App extends Component {\n  state= {\n  /*\n    We are creating a property called displayInfos and we are creating an array of the property objects.\n    We are going to pass this list as property to Display component.\n    Display component will recieve this property as a list and then we will cycle through and display it.\n    To pass this array to the Display component:\n          --> <Display displayInfos={this.state.displayInfos} />\n  */\n\n  displayInfos: [\n    { name: 'Jim', birthMonth:'June', id: 1 },\n    { name: 'Pam', age: 31, birthMonth:'January', id: 2 },\n    { name: 'Richard', age: 42, birthMonth:'August', id: 3 }\n  ]\n}\n\naddInfo = (info) => {\n  console.log('Inside App Component', info);\n  /*\n    We have state of AddInfo component here (i.e 'info' argument of the function)\n    and now we need to update the state of App Component here with the 'info' object.\n    For that we need to setState.\n\n    But notice that displayInfos state has id: attribute but the info object we get doesn't have id.\n    If we give user to input the id then they can input same id's and that would be bad and generate some duplicate id.\n    We can add the id attribute by assinging it some value.\n  */\n\n  //\n  /*\n    Now remember we can't alter the state Directly so we can't push directly tothe array like:\n        this.setState({\n          displayInfos: this.displayInfos.push(info) --- we can't do this because push method alter's the original array.\n        })\n    So the way would be:\n      -- Make a copy of the displayInfos array. That we will not push the info directly into the displayInfos array\n      -- Now push the new info into the copy of the array and assign that array to the setState method.\n      -- We create the copy of the displayInfos array using the SPREAD OPERATORS like:\n\n            let displayInfos = [...this.state.displayInfos] -- this creates the copy of the array.\n\n      -- The displayInfos will be the exact copy of the displayInfos array from initial state.\n      -- Now we can just add the info from AddInfo component to the above newly created array like:\n            let displayInfos = [...this.state.displayInfos, info]\n      -- So now we are not directly updating the array outside setState().\n  */\n//  let displayInfos = [...this.state.displayInfos, info];\ninfo.id = Math.floor(Math.random()*10);\nconsole.log(info.id);\nlet displayInfos = [...this.state.displayInfos, info];\nconsole.log(displayInfos);\n\n  this.setState({\n    displayInfos: displayInfos\n  })\n}\n  deleteInfo = (id) => {\n  console.log(id);\n  let displayInfos = this.state.displayInfos.filter( info=>{\n    return info.id !== id;\n  })\n  console.log('After Deleting',displayInfos);\n  this.setState({\n    displayInfos: displayInfos\n  })\n  }\n  render() {\n    return (\n      <BrowserRouter>\n      <div className=\"App\">\n      <Navbar />\n      <Route exact path ='/' component={Home} />\n      <Route exact path ='/Person' component={Person} />\n      </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}